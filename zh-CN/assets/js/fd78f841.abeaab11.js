"use strict";(self.webpackChunktouchgfx_documentation=self.webpackChunktouchgfx_documentation||[]).push([[844],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(n),h=o,d=f["".concat(l,".").concat(h)]||f[h]||p[h]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},44035:function(e,t,n){var r=n(67294),o=n(25026);t.Z=function(e){const t=e.noShadow||!1,n=e.width,a=e.height,i=(0,o.Z)(e.imageSource);return t?r.createElement("div",{class:"figure noshadow"},r.createElement("a",{href:i,target:"_blank"},r.createElement("img",{width:n,height:a,src:i})),r.createElement("p",null,e.children)):r.createElement("div",{class:"figure"},r.createElement("a",{href:i,target:"_blank"},r.createElement("img",{width:n,height:a,src:i})),r.createElement("p",null,e.children))}},88678:function(e,t,n){var r=n(67294);class o extends r.Component{render(){const e=`highlight highlight-${this.props.type}`;return r.createElement("div",{class:e},r.createElement("div",{class:"highlight-heading"},r.createElement("h5",null,r.createElement("div",{class:"highlight-icon"},this.props.icon),this.props.header)),r.createElement("div",{class:"highlight-content"},this.props.children))}}t.Z=o},93054:function(e,t,n){var r=n(67294),o=n(88678);const a=r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},r.createElement("path",{"fill-rule":"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}));class i extends r.Component{render(){return r.createElement(o.Z,{color:"var(--highlight-color-note)",header:"Note",type:"note",icon:a},this.props.children)}}t.Z=i},37793:function(e,t,n){var r=n(67294),o=n(88678);const a=r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},r.createElement("path",{"fill-rule":"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}));class i extends r.Component{render(){return r.createElement(o.Z,{color:"var(--highlight-color-tip)",header:"Tip",type:"tip",icon:a},this.props.children)}}t.Z=i},35096:function(e,t,n){function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!r(e)}n.d(t,{b:function(){return r},Z:function(){return o}})},25026:function(e,t,n){n.d(t,{C:function(){return a},Z:function(){return i}});var r=n(11368),o=n(35096);function a(){const{siteConfig:{baseUrl:e="/",url:t}={}}=(0,r.Z)();return{withBaseUrl:(n,r)=>function(e,t,n,{forcePrependBaseUrl:r=!1,absolute:a=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if((0,o.b)(n))return n;if(r)return t+n;const i=n.startsWith(t)?n:t+n.replace(/^\//,"");return a?e+i:i}(t,e,n,r)}}function i(e,t={}){const{withBaseUrl:n}=a();return n(e,t)}},73492:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return g},metadata:function(){return v},toc:function(){return k},default:function(){return C}});var r=n(3905),o=n(44035),a=n(93054),i=n(37793),c=Object.defineProperty,l=Object.defineProperties,s=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable,h=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&h(e,n,t[n]);if(u)for(var n of u(t))f.call(t,n)&&h(e,n,t[n]);return e};const m={id:"scenarios-fmc",title:"FMC\u548cSPI\u663e\u793a\u63a5\u53e3"},g=void 0,v={unversionedId:"development/touchgfx-hal-development/scenarios/scenarios-fmc",id:"development/touchgfx-hal-development/scenarios/scenarios-fmc",isDocsHomePage:!1,title:"FMC\u548cSPI\u663e\u793a\u63a5\u53e3",description:"The following scenario shows, generally, the steps involved in transferring pixels to an LCD connected to either an FMC or through SPI; Two methods that share some elements. \u672c\u8282\u63cf\u8ff0\u7684\u65b9\u6848\u4ee5ST7789H2 LCD\u63a7\u5236\u5668\u4e3a\u4f8b\u3002",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/development/touchgfx-hal-development/scenarios/scenarios-fmc.mdx",sourceDirName:"development/touchgfx-hal-development/scenarios",slug:"/development/touchgfx-hal-development/scenarios/scenarios-fmc",permalink:"/4.19/zh-CN/docs/development/touchgfx-hal-development/scenarios/scenarios-fmc",tags:[],version:"current",frontMatter:{id:"scenarios-fmc",title:"FMC\u548cSPI\u663e\u793a\u63a5\u53e3"},sidebar:"docs",previous:{title:"LTDC/\u5e76\u884cRGB",permalink:"/4.19/zh-CN/docs/development/touchgfx-hal-development/scenarios/scenarios-ltdc-parallel-rgb"},next:{title:"\u5e27\u7f13\u5b58\u7b56\u7565",permalink:"/4.19/zh-CN/docs/development/touchgfx-hal-development/scenarios/scenarios-framebuffer-strategies"}},k=[{value:"\u4f20\u8f93\u5e27\u7f13\u5b58\u5185\u5bb9",id:"transferring-the-framebuffer",children:[{value:"FMC",id:"fmc",children:[],level:3}],level:2},{value:"\u4eceHAL::flushFrameBuffer()\u8fd4\u56de",id:"returning-from-halflushframebuffer",children:[],level:2},{value:"TouchGFX\u9a71\u52a8\u7a0b\u5e8f/\u6495\u88c2\u6548\u679c\u4fe1\u53f7",id:"touchgfx-driver--tearing-effect-signal",children:[],level:2},{value:"\u7ed3\u8bba",id:"conclusion",children:[],level:2}],y=(T="Caution",function(e){return console.warn("Component "+T+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",d({},e))});var T;const b={toc:k};function C(e){var t,n=e,{components:c}=n,h=((e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&u)for(var r of u(e))t.indexOf(r)<0&&f.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=d(d({},b),h),l(t,s({components:c,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"The following scenario shows, generally, the steps involved in transferring pixels to an LCD connected to either an FMC or through SPI; Two methods that share some elements. \u672c\u8282\u63cf\u8ff0\u7684\u65b9\u6848\u4ee5ST7789H2 LCD\u63a7\u5236\u5668\u4e3a\u4f8b\u3002"),(0,r.kt)("p",null,"Once FMC or SPI is configured according to board specifications in STM32CubeMX TouchGFX Generator can be used to generate a TouchGFX HAL allowing developers to write code that transfers updated part of the application framebuffer to a connected display."),(0,r.kt)("p",null,"\u4e0b\u56fe\u663e\u793a\u4e86\u9009\u62e9",(0,r.kt)("em",{parentName:"p"},"\u5b9a\u5236"),"\u663e\u793a\u63a5\u53e3\u65f6\u7684TouchGFX Generator\u914d\u7f6e\u3002 This instructs the TouchGFX Generator that the developer would like to configure and transfer pixels from the framebuffer memory to the display ",(0,r.kt)("strong",{parentName:"p"},"manually")," and generates the handles to accomplish this."),(0,r.kt)(o.Z,{imageSource:"/img/development/touchgfx-hal-development/scenarios/custom-interface.png",noShadow:!1,mdxType:"Figure"},"TouchGFX Generator\u914d\u7f6e"),(0,r.kt)(i.Z,{mdxType:"Tip"},"For displays connected through SPI, custom display interface must be selected"),(0,r.kt)("p",null,"Generally, for displays with embedded GRAM, the code written by the user in the generated TouchGFX HAL should perform the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u6839\u636e\u8981\u91cd\u7ed8\u7684\u5e27\u7f13\u5b58\u533a\u57df\uff0c\u5c06\u201c\u663e\u793a\u5149\u6807\u201d\u548c\u201c\u6d3b\u52a8\u7a97\u53e3\u201d\u79fb\u52a8\u5230GRAM\u4e2d\u4e0e\u6b64\u533a\u57df\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002"),(0,r.kt)("li",{parentName:"ol"},"\u51c6\u5907\u5c06\u4f20\u5165\u7684\u50cf\u7d20\u6570\u636e\u5199\u5165GRAM\u3002"),(0,r.kt)("li",{parentName:"ol"},"\u53d1\u9001\u50cf\u7d20\u6570\u636e\u3002")),(0,r.kt)("h2",d({},{id:"transferring-the-framebuffer"}),"\u4f20\u8f93\u5e27\u7f13\u5b58\u5185\u5bb9"),(0,r.kt)("p",null,"\u5728\u5e27\u7f13\u5b58\u5185\u5bb9\u88ab\u66f4\u65b0\u540e\uff0cTouchGFX Engine\u4f1a\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"HAL::flushFrameBuffer(Rect r)"),"\u3002 This function can be overridden when developers must implement code to transfer pixels to a display manually, as in the case of SPI and FMC. As we'll see, functions to transfer pixels via the FMC Banks are generated by TouchGFX Generator."),(0,r.kt)(a.Z,{mdxType:"Note"},"\u672c\u8282\u4e2d\u663e\u793a\u7684ST7789H2\u9a71\u52a8\u7a0b\u5e8f\u4ee3\u7801\u5c06\u5728\u677f\u642d\u5efa\u9636\u6bb5\u5f00\u53d1\uff0c\u4e00\u65e6\u9a71\u52a8\u6709\u6548\u5de5\u4f5c\uff0c\u5c31\u53ef\u4ee5\u6216\u591a\u6216\u5c11\u5730\u590d\u5236\u5230TouchGFX Generator\u751f\u6210\u7684HAL\u7c7b\u4e2d\u3002",(0,r.kt)("p",null,"\u9a71\u52a8\u7a0b\u5e8f\u5fc5\u987b\u80fd\u591f\u5c06\u50cf\u7d20\u4f20\u8f93\u5230\u663e\u793a\u5668\uff0c\u5e76\u53ef\u4ee5\u63a7\u5236\u663e\u793a\u5668\u7684\u50cf\u7d20\u5199\u5165\u4f4d\u7f6e\u3002 Check the datasheet for your display for further details.")),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-cpp"}),"void  TouchGFXHAL::flushFrameBuffer(const Rect& rect)\n{\n    /* Set Cursor */\n    ST7789H2_SetDisplayWindow(rect.x, rect.y, rect.width, rect.height);\n\n    /* Prepare to write to LCD RAM */\n    __ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);\n\n    /* Send Pixels - User defined function */\n    this->copyFrameBufferBlockToLCD(rect);\n}\n")),(0,r.kt)("p",null,"The following function ",(0,r.kt)("inlineCode",{parentName:"p"},"ST7789H2_SetDisplayWindow")," sets the ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),' coordinates for the virtual "cursor" in GRAM by writing to specific registers, which is usual for displays using GRAM.'),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-c"}),'extern "C"\nvoid ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)\n{\n    uint8_t   parameter[4];\n\n    /* CASET: Column Address Set */\n    parameter[0] = 0x00;\n    parameter[1] = Xpos;\n    parameter[2] = 0x00;\n    parameter[3] = Xpos + Width - 1;\n    ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);\n\n    /* RASET: Row Address Set */\n    parameter[0] = 0x00;\n    parameter[1] = Ypos;\n    parameter[2] = 0x00;\n    parameter[3] = Ypos + Height - 1;\n    ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);\n}\n')),(0,r.kt)("p",null,"The following function ",(0,r.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::copyFrameBufferBlockToLCD")," is, in this example, a user defined function that sends one line of the updated area (",(0,r.kt)("inlineCode",{parentName:"p"},"Rect"),") at a time, ensuring to progress the framebuffer pointer accordingly."),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-cpp"}),"void TouchGFXHAL::copyFrameBufferBlockToLCD(const Rect& rect)\n{\n    __IO uint16_t* ptr;\n    uint32_t height;\n\n    // This can be accelerated using regular DMA hardware\n    for (height = 0; height < rect.height ; height++)\n    {\n        ptr = getClientFrameBuffer() + rect.x + (height + rect.y) * HAL::DISPLAY_WIDTH;\n        LCD_IO_WriteMultipleData((uint16_t*)ptr, rect.width);\n    }\n}\n")),(0,r.kt)("p",null,"TouchGFX Generator\u5c06\u751f\u6210\u4e00\u4e2a\u51fd\u6570\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"advanceFrameBufferToRect"),"\uff0c\u5e76\u6839\u636e",(0,r.kt)("inlineCode",{parentName:"p"},"Rect"),"\u5728\u5e27\u7f13\u51b2\u4e2d\u7684\u4f4d\u7f6e\u6765\u63a8\u8fdb",(0,r.kt)("inlineCode",{parentName:"p"},"ptr"),"\u6307\u9488\uff0c\u800c\u4e0d\u7528\u624b\u52a8\u63a8\u8fdb",(0,r.kt)("inlineCode",{parentName:"p"},"ptr"),"\u6307\u9488\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-cpp"}),"inline uint8_t* TouchGFXGeneratedHAL::advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect) const\n{\n    //       Advance vertically                   Advance horizontally\n    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;\n    return fbPtr;\n}\n")),(0,r.kt)("h3",d({},{id:"fmc"}),"FMC"),(0,r.kt)("p",null,"TouchGFX Generator also supports FMC display interface, if at least one FMC Bank is configured correctly. In this case, the code generated by TouchGFX Generator is similar to that of ",(0,r.kt)("em",{parentName:"p"},"Custom")," display interface, except that the function ",(0,r.kt)("inlineCode",{parentName:"p"},"LCD_IO_WriteMultipleData")," is generated to interact with the FMC bank connected to the display. Revisiting the code presented earlier for the function ",(0,r.kt)("inlineCode",{parentName:"p"},"copyFrameBufferBlockToLCD")," you'll see that it uses the generated function."),(0,r.kt)(i.Z,{mdxType:"Tip"},"For both SPI and FMC display interfaces, developers will modify the flushFrameBuffer() function to 1) Set cursor 2) Prepare to write to GRAM 3) transfer the pixels either through a custom SPI display driver or through the generated FMC Bank functions. "),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-c"}),"    __weak void LCD_IO_WriteMultipleData(uint16_t* pData, uint32_t Size)\n    {\n        uint32_t  i;\n\n        for (i = 0; i < Size; i++)\n        {\n            FMC_BANK1_WriteData(pData[i]);\n        }\n    }\n")),(0,r.kt)("p",null,"The following figure shows a valid 16-bit (required) configuration of FMC bank 2 (either can be used)."),(0,r.kt)(o.Z,{imageSource:"/img/development/touchgfx-hal-development/scenarios/fmc-bank-configuration.png",width:"600",noShadow:!1,mdxType:"Figure"},"FMC Bank Configuration"),(0,r.kt)("p",null,"Once a valid configuration has been met, this bank can be selected in TouchGFX Generator. Verify the start Start address of the FMC Bank Register for your MCU."),(0,r.kt)(o.Z,{imageSource:"/img/development/touchgfx-hal-development/scenarios/fmc-interface-selection.png",width:"500",noShadow:!1,mdxType:"Figure"},"FMC Interface Selection"),(0,r.kt)("p",null,"TouchGFX Generator validates the configuration of the FMC Banks and reports any issues it may find."),(0,r.kt)(o.Z,{imageSource:"/img/development/touchgfx-hal-development/scenarios/fmc-bank-configuration-8bit.png",noShadow:!1,mdxType:"Figure"},"FMC Configuration Error"),(0,r.kt)("h2",d({},{id:"returning-from-halflushframebuffer"}),"\u4eceHAL::flushFrameBuffer()\u8fd4\u56de"),(0,r.kt)("p",null,"\u5728\u51fd\u6570\u8fd4\u56de\u540e\uff0cTouchGFX Engine\u7ee7\u7eed\u7ed8\u5236\u5269\u4f59\u7684\u5e27\u5185\u5bb9\u3002 \u5982\u679c\u5f00\u53d1\u4eba\u5458\u5e0c\u671b\u4f7f\u7528DMA\u5c06\u50cf\u7d20\u4f20\u8f93\u5230\u663e\u793a\u5668\uff0c\u4ed6\u4eec\u5fc5\u987b\u901a\u8fc7\u7b49\u5f85",(0,r.kt)("em",{parentName:"p"},"DMA\u5b8c\u6210"),"\u4e2d\u65ad\u53d1\u51fa\u7684\u4fe1\u53f7\u91cf\u6765\u786e\u4fdd",(0,r.kt)("inlineCode",{parentName:"p"},"HAL::flushFrameBuffer(Rect& rect)"),"\u4e0d\u4f1a\u7acb\u5373\u8fd4\u56de\u3002"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u4f2a\u4ee3\u7801\u793a\u4f8b\u663e\u793a\u4e86\u5728\u4f7f\u7528DMA\u7684\u60c5\u51b5\u4e0b\u5982\u4f55\u6784\u9020",(0,r.kt)("inlineCode",{parentName:"p"},"HAL::flushFrameBuffer()"),"\u3002 \u6b64\u4ee3\u7801\u4f7f\u7528\u4e86FreeRTOS\u4fe1\u53f7\u91cf",(0,r.kt)("inlineCode",{parentName:"p"},"screen_frame_buffer_sem"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-cpp"}),"void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)\n{\n    uint16_t* fb = HAL::lockFrameBuffer();\n\n    //Prepare display: Set cursor, write to display gram as described previously in this scenario\n\n    //Try to take a display semaphore - Always free at this point\n    xSemaphoreTake(screen_frame_buffer_sem, portMAX_DELAY);\n\n    //Set up DMA\n    screenDMAEnable();\n\n    // Wait for the DMA transfer to complete\n    xSemaphoreTake(screen_frame_buffer_sem, portMAX_DELAY);\n\n    //Unlock framebuffer and give semaphore back\n    HAL::unlockFrameBuffer();\n    xSemaphoreGive(screen_frame_buffer_sem);\n}\n")),(0,r.kt)(y,{mdxType:"Caution"},"The FMC code generated by TouchGFX Generator does not use DMA."),(0,r.kt)("h2",d({},{id:"touchgfx-driver--tearing-effect-signal"}),"TouchGFX\u9a71\u52a8\u7a0b\u5e8f/\u6495\u88c2\u6548\u679c\u4fe1\u53f7"),(0,r.kt)("p",null,"\u4ece\u4e0a\u9762\u7684TouchGFX Generator\u914d\u7f6e\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5e94\u7528\u4e2d\u7684\u201c\u6ef4\u7b54\u8ba1\u65f6\u6e90\u201d\u4e5f\u88ab\u8bbe\u4e3a\u201c\u5b9a\u5236\u201d\uff0c\u5bf9\u4e8e\u4e0d\u5185\u7f6eTFT\u63a7\u5236\u5668\u7684MCU\u6765\u8bf4\uff0c\u8fd9\u4e5f\u7b97\u662f\u5e38\u89c1\u8bbe\u7f6e\u3002"),(0,r.kt)("p",null,"\u5982\u62bd\u8c61\u5c42\u67b6\u6784\u90e8\u5206\u6240\u8ff0\uff0c\u901a\u5e38\u5728\u53d1\u51fa\u663e\u793a\u4fe1\u53f7\u65f6\uff0c\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"OSWrappers::signalVSync()"),"\u6765\u89e3\u9664TouchGFX Engine\u4e3b\u5faa\u73af\u963b\u585e\u3002"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u5177\u6709\u4e32\u884c\u62168080\u663e\u793a\u63a5\u53e3\u7684\u663e\u793a\u5668\uff0c\u5185\u7f6e\u663e\u793a\u63a7\u5236\u5668\u901a\u5e38\u4f1a\u4ea7\u751f\u4e00\u4e2a\u5468\u671f\u6027\u6495\u88c2\u6548\u679c\uff08TE\uff09\u4fe1\u53f7\uff0c\u8be5\u4fe1\u53f7\u53ef\u4ee5\u8fde\u63a5\u5230MCU\u4e0a\u7684GPIO\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u901a\u5e38\u5c06MCU\u914d\u7f6e\u4e3a\u5f53GPIO\u6536\u5230\u8be5\u4fe1\u53f7\u65f6\u89e6\u53d1\u4e2d\u65ad\u3002 \u7136\u540e\uff0c\u8be5\u201c\u6495\u88c2\u6548\u679c\u201d\u4e2d\u65ad\u5c06\u89e3\u9664\u5bf9TouchGFX Engine\u4e3b\u5faa\u73af\u7684\u963b\u585e\uff0c\u4ee5\u4fbf\u6e32\u67d3\u4e0b\u4e00\u5e27\u3002 Remember to configure the GPIO to input and enable the external interrupt for the pin in STM32CubeMX."),(0,r.kt)("pre",null,(0,r.kt)("code",d({parentName:"pre"},{className:"language-cpp"}),'extern "C"\nvoid TE_Handler(void)\n{\n    ...\n    /* Unblock TouchGFX Engine Main Loop to render next frame */\n    OSWrappers::signalVSync();\n    ...\n}\n\n')),(0,r.kt)("h2",d({},{id:"conclusion"}),"\u7ed3\u8bba"),(0,r.kt)("p",null,"\u5f00\u53d1\u4eba\u5458\u53ef\u901a\u8fc7TouchGFX Generator\u9009\u62e9",(0,r.kt)("em",{parentName:"p"},"\u5b9a\u5236"),"\u663e\u793a\u63a5\u53e3\uff0c\u5e76\u81ea\u4e3b\u7f16\u5199\u4ee3\u7801\u5b9e\u73b0\u5c06\u50cf\u7d20\u4ece\u5e94\u7528\u7a0b\u5e8f\u5e27\u7f13\u5b58\u4f20\u8f93\u5230\u663e\u793a\u5668\u4e4b\u76ee\u7684\u3002"),(0,r.kt)("p",null,"TouchGFX Generator\u5c06\u751f\u6210function",(0,r.kt)("inlineCode",{parentName:"p"},"TouchGFXHAL::flushFrameBuffer(Rect& rect)"),"\u51fd\u6570\uff0c\u5f53\u6e32\u67d3\u5b8c\u6210\u5e27\u7f13\u5b58\u7684\u4e00\u7247\u533a\u57df\u540e\uff0cTouchGFX\u4f1a\u81ea\u52a8\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u540c\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u5c06\u66f4\u65b0\u8fc7\u7684\u5e27\u7f13\u5b58\u6570\u636e\u901a\u8fc7FMC\u3001SPI\u6216\u5176\u5b83\u9014\u5f84\u4f20\u9001\u5230\u663e\u793a\u5668\u3002 Regardless, the following steps must be completed in both cases:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u6839\u636e\u8981\u91cd\u7ed8\u7684\u5e27\u7f13\u5b58\u533a\u57df\uff0c\u5c06\u201c\u663e\u793a\u5149\u6807\u201d\u548c\u201c\u6d3b\u52a8\u7a97\u53e3\u201d\u79fb\u52a8\u5230GRAM\u4e2d\u4e0e\u6b64\u533a\u57df\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002"),(0,r.kt)("li",{parentName:"ol"},"\u51c6\u5907\u5c06\u4f20\u5165\u7684\u50cf\u7d20\u6570\u636e\u5199\u5165GRAM\u3002"),(0,r.kt)("li",{parentName:"ol"},"\u53d1\u9001\u50cf\u7d20\u6570\u636e\u3002 For FMC display interface, this function is generated for you and can be used inside ",(0,r.kt)("inlineCode",{parentName:"li"},"flushFrameBuffer(Rect& rect)")," (See earlier in this article).")),(0,r.kt)("p",null,"Selecting the ",(0,r.kt)("em",{parentName:"p"},"custom")," or ",(0,r.kt)("em",{parentName:"p"},"FMC")," display interface also requires developers to implement a custom TouchGFX Application Tick driver that signals ",(0,r.kt)("inlineCode",{parentName:"p"},"OSWrappers::signalVSync()")," to unblock the TouchGFX Engine Main loop. \u901a\u5e38\uff0c\u4e0e\u4e0d\u5e26TFT\u63a7\u5236\u5668\u7684MCU\u4e00\u8d77\u4f7f\u7528\u7684\u663e\u793a\u5668\u4f1a\u63d0\u4f9b\u8fde\u63a5\u81f3MCU\u7684",(0,r.kt)("em",{parentName:"p"},"\u6495\u88c2\u6548\u679c"),"\u4fe1\u53f7\u3002"))}C.isMDXComponent=!0}}]);